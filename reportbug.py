import marshal, base64
exec(base64.b64decode("IyEvdXNyL2Jpbi9weXRob24zCgppbXBvcnQgc210cGxpYgppbXBvcnQgb3MKZnJvbSBlbWFpbC5taW1lLmJhc2UgaW1wb3J0IE1JTUVCYXNlCmZyb20gZW1haWwgaW1wb3J0IGVuY29kZXJzCmZyb20gZW1haWwubWltZS5hcHBsaWNhdGlvbiBpbXBvcnQgTUlNRUFwcGxpY2F0aW9uCmZyb20gZW1haWwubWltZS5tdWx0aXBhcnQgaW1wb3J0IE1JTUVNdWx0aXBhcnQKZnJvbSBlbWFpbC5taW1lLnRleHQgaW1wb3J0IE1JTUVUZXh0CmZyb20gZW1haWwubWltZS5pbWFnZSBpbXBvcnQgTUlNRUltYWdlCmZyb20gb3MgaW1wb3J0IHN5c3RlbQpmcm9tIGdldHBhc3MgaW1wb3J0IGdldHBhc3MKZnJvbSB0ZW1wbGF0ZXMgaW1wb3J0IGljb24KJycnCkNPREVEIEJZIFNodUJoYW0KCiMjIyBGSU5ELi4uTUUuCgpJbnN0YWdyYW0gOiBodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3NodWJoYW1fZzBzYWluLwoKR2l0aHViLiAgIDogaHR0cHM6Ly9naXRodWIuY29tL3NodWJoYW1nZ29zYWkKCkZhY2Vib29rICA6IGh0dHBzOi8vbS5mYWNlYm9vay5jb20vc2h1YmhhbS5nb3NhaW4uOTgwCgoKCicnJwpjbGFzcyBjb2xvcnM6CiAgICBkZWYgX19pbml0X18oc2VsZixpbnB1dENvbG9yKToKICAgICAgICBzZWxmLkNvbG9yID0gaW5wdXRDb2xvcgpyZWQgPSBjb2xvcnMoJ1wwMzNbOTFtJykKZ3JlZW4gPSBjb2xvcnMoJ1wwMzNbOTJtJykKeWVsbG93ID0gY29sb3JzKCdcMDMzWzkzbScpCmN5YW4gPSBjb2xvcnMoJ1wwMzNbOTZtJykKCnN5c3RlbSgnY2xlYXInKQppY29uLml0ZW0oKQpwcmludCAocmVkLkNvbG9yKycjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjJykKcHJpbnQgKCcjIyAnK2N5YW4uQ29sb3IrJ1vil49dIFRoaXMgdG9vbCBpcyBzcGVjaWZpY2FsbHkgZm9yIEdtYWlsIGFuZCBZYWhvbyB1c2VycyEnK3JlZC5Db2xvcisnICAgICAgIyMnKQpwcmludCAoJyMjICcrY3lhbi5Db2xvcisnW+KXj10gRW5hYmxlIChsZXNzIHNlY3VyZSBhcHBzKSBpbiB5b3VyIGVtYWlsIHNldHRpbmdzIHRvIHdvcmshJytyZWQuQ29sb3IrJyAjIycpCnByaW50ICgnIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIycpCnByaW50ICgnXG4nK3llbGxvdy5Db2xvcisnW+KXj10gc2VsZWN0IHR5cGUgdnVsbmVyYWJpbGl0eSB5b3Ugd2FudCB0byByZXBvcnQhJykKcHJpbnQgKCfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQpwcmludCAoJyAgICAnK2dyZWVuLkNvbG9yKydbMV0uJyt5ZWxsb3cuQ29sb3IrJyBTUUxJW1NRTCBJbmplY3Rpb25dJykKcHJpbnQgKCcgICAgJytncmVlbi5Db2xvcisnWzJdLicreWVsbG93LkNvbG9yKycgTEZJW0xvY2FsIEZpbGUgSW5jbHVzaW9uXScpCnByaW50ICgnICAgICcrZ3JlZW4uQ29sb3IrJ1szXS4nK3llbGxvdy5Db2xvcisnIFJGSVtSZW1vdGUgRmlsZSBJbmNsdXNpb25dJykKcHJpbnQgKCcgICAgJytncmVlbi5Db2xvcisnWzRdLicreWVsbG93LkNvbG9yKycgUkNFW1JlbW90ZSBDb2RlIEV4ZWN1dGlvbl0nKQpwcmludCAoJyAgICAnK2dyZWVuLkNvbG9yKydbNV0uJyt5ZWxsb3cuQ29sb3IrJyBDU1JGIEF0dGFjaycpCnByaW50ICgnICAgICcrZ3JlZW4uQ29sb3IrJ1s2XS4nK3llbGxvdy5Db2xvcisnIFhTU1tDcm9zcyBTaXRlIFNjcmlwdGluZ10nKQpwcmludCAoJyAgICAnK2dyZWVuLkNvbG9yKydbN10uJyt5ZWxsb3cuQ29sb3IrJyBTU0lbU2VydmVyIFNpZGUgSW5qZWN0aW9uXScpCnByaW50ICgnICAgICcrZ3JlZW4uQ29sb3IrJ1s4XS4nK3llbGxvdy5Db2xvcisnIENTViBJbmplY3Rpb24nKQpwcmludCAoJyAgICAnK2dyZWVuLkNvbG9yKydbOV0uJyt5ZWxsb3cuQ29sb3IrJyBQYXJhbWV0ZXIgVGFtcGVyaW5nJykKcHJpbnQgKCcgICAnK2dyZWVuLkNvbG9yKydbMTBdLicreWVsbG93LkNvbG9yKycgQnlwYXNzIEFkbWluJykKcHJpbnQgKCcgICAnK2dyZWVuLkNvbG9yKydbOTldLicreWVsbG93LkNvbG9yKycgRXhpdC9RdWl0JykKcHJpbnQgKCcgICAnK2dyZWVuLkNvbG9yKydbMDBdLicreWVsbG93LkNvbG9yKycgUmVpbnN0YWxsL1VwZGF0ZSBUb29sc1xuJykKCgpwcmludCAoJ1xuJytncmVlbi5Db2xvcisn4pWt4pSB4pSBwqQnK3llbGxvdy5Db2xvcisnIFtFbnRlciB0aGUgc2VsZWN0ZWQgbnVtYmVyXScpCmlucHV0YnVnID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKQoKbXNnID0gTUlNRU11bHRpcGFydCgpCgoKCgppZiBpbnB1dGJ1ZyA9PSAnMSc6CgogICAgaW5wdXRzaXRlID0gJzxiPnVybCB2dWxuIFNRTCBJbmplY3Rpb24gOjwvYj4gJwogICAgcHJpbnQgKCdcbicrY3lhbi5Db2xvcisnW+KXj10gRXggOiBodHRwczovL3Bvcm5zaXRlLmNvbS92aWV3LnBocD9pZD0xMicpCiAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIHRoZSBidWcgd2Vic2l0ZSB1cmxdJykKICAgIHVybHNpdGUgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCiAgICBpZiB1cmxzaXRlOgogICAgICAgIHByaW50ICgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHNpdGUgbmFtZSEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKICAgIGNsb3NlbWFpbCA9ICc8YnI+PGJyPmRlbmdhbiBsYXBvcmFuIGluaSBzZW1vZ2EgYnVnIHJlcG9ydCBzYXlhIGRhcGF0IGRpdGVyaW1hIGRlbmdhbiBiYWlrLCB0ZXJpbWFrYXNpaC4nCiAgICByZXNwZWN0ID0gJzxicj48YnI+SG9ybWF0IHNheWEsPGJyPicKICAgIHByaW50IChncmVlbi5Db2xvcisn4pWt4pSB4pSBwqQnK3llbGxvdy5Db2xvcisnIFtFbnRlciBZb3VyIE5hbWVdJykKICAgIHlvdXJuYW1lID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKQogICAgaWYgeW91cm5hbWU6CiAgICAgICAgcHJpbnQoJycpCiAgICBlbHNlOgogICAgICAgIHByaW50ICgnXG4nK3JlZC5Db2xvcisnWyFdIFBsZWFzZSBlbnRlciB5b3VyIG5hbWUhJykKICAgICAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZBcbicpCiAgICAgICAgZXhpdCgpCiAgICB0YWJsZWNsb3NlID0gJycnPC9wPjwvdGQ+PC90cj48dHI+CiAgICA8dGggY2xhc3M9InRodHdvIj4KICAgIHJlcG9ydGVkIHVzaW5nIGJ1Z3JlcG9ydCB0b29sczxicj50b29scyBtYWRlIGJ5IDxhIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vc2h1YmhhbV9nMHNhaW4vIj5zaHViaGFtZ18wc2FpbjwvYT4KICAgIDwvdGg+CiAgICA8L3RyPjwvdGFibGU+PC90ZD48L3RyPjwvdGFibGU+PC9ib2R5PjwvaHRtbD4KICAgICcnJwogICAgbXNnLmF0dGFjaChNSU1FVGV4dChvcGVuKCd0ZW1wbGF0ZXMvc3FsaS5odG1sJywpLnJlYWQoKSwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dChpbnB1dHNpdGUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQodXJsc2l0ZSwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dChjbG9zZW1haWwsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQocmVzcGVjdCwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dCh5b3VybmFtZSwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dCh0YWJsZWNsb3NlLCdodG1sJykpCiAgICBwcmludCAoY3lhbi5Db2xvcisnW+KXj10gRW50ZXIgeW91ciBmaWxlIGFzIGEgUE9DIChQcm9vZiBvZiBDb25jZXB0KSEnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvRG9jdW1lbnQvcmVwb3J0YnVnLnBkZicpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9yZXBvcnRidWcuanBnJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL1JlY29yZGVyL3JlcG9ydGJ1Zy5tcDQnKQogICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykKICAgIHByaW50IChncmVlbi5Db2xvcisn4pWt4pSB4pSBwqQnK3llbGxvdy5Db2xvcisnIFtFbnRlciB5b3VyIGRvY3VtZW50IGZpbGUgKGRlZmF1bHQ6emN5YmVyY3J1LmpwZyldJykKICAgIGZpbGVfbG9jYXRpb24gPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpIG9yICd6Y3liZXJjcnUuanBnJwogICAgZmlsZW5hbWUgPSBvcy5wYXRoLmJhc2VuYW1lKGZpbGVfbG9jYXRpb24pCiAgICBhdHRhY2htZW50ID0gb3BlbihmaWxlX2xvY2F0aW9uLCAicmIiKQogICAgcGFydCA9IE1JTUVCYXNlKCdhcHBsaWNhdGlvbicsICdvY3RldC1zdHJlYW0nKQogICAgcGFydC5zZXRfcGF5bG9hZChhdHRhY2htZW50LnJlYWQoKSkKICAgIGVuY29kZXJzLmVuY29kZV9iYXNlNjQocGFydCkKICAgIHBhcnQuYWRkX2hlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICJhdHRhY2htZW50OyBmaWxlbmFtZT0gJXMiICUgZmlsZW5hbWUpCiAgICBtc2cuYXR0YWNoKHBhcnQpCiAgCiAgCiAgCmVsaWYgaW5wdXRidWcgPT0gJzInOgogICAgCiAgICBpbnB1dHNpdGUgPSAnPGI+dXJsIHZ1bG4gTG9jYWwgRmlsZSBJbmNsdXNpb24gOjwvYj4gJwogICAgcHJpbnQgKCdcbicrY3lhbi5Db2xvcisnW+KXj10gRXggOiBodHRwczovL3Bvcm5zaXRlLmNvbS92aWV3Lz9maWxlPS4uL2V0Yy9wYXNzd2QnKQogICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykKICAgIHByaW50IChncmVlbi5Db2xvcisn4pWt4pSB4pSBwqQnK3llbGxvdy5Db2xvcisnIFtFbnRlciB0aGUgYnVnIHdlYnNpdGUgdXJsXScpCiAgICB1cmxzaXRlID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKQogICAgaWYgdXJsc2l0ZToKICAgICAgICBwcmludCAoJycpCiAgICBlbHNlOgogICAgICAgIHByaW50ICgnXG4nK3JlZC5Db2xvcisnWyFdIFBsZWFzZSBlbnRlciBzaXRlIG5hbWUhJykKICAgICAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZBcbicpCiAgICAgICAgZXhpdCgpCiAgICBjbG9zZW1haWwgPSAnPGJyPjxicj5kZW5nYW4gbGFwb3JhbiBpbmkgc2Vtb2dhIGJ1ZyByZXBvcnQgc2F5YSBkYXBhdCBkaXRlcmltYSBkZW5nYW4gYmFpaywgdGVyaW1ha2FzaWguJwogICAgcmVzcGVjdCA9ICc8YnI+PGJyPkhvcm1hdCBzYXlhLDxicj4nCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgWW91ciBOYW1lXScpCiAgICB5b3VybmFtZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHlvdXJuYW1lOgogICAgICAgIHByaW50KCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgeW91ciBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgdGFibGVjbG9zZSA9ICcnJzwvcD48L3RkPjwvdHI+PHRyPgogICAgPHRoIGNsYXNzPSJ0aHR3byI+CiAgICByZXBvcnRlZCB1c2luZyByZXBvcnRidWcgdG9vbHM8YnI+dG9vbHMgbWFkZSBieSA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3NodWJoYW1fZzBzYWluLyI+c2h1YmhhbV9nMHNhaW48L2E+CiAgICA8L3RoPgogICAgPC90cj48L3RhYmxlPjwvdGQ+PC90cj48L3RhYmxlPjwvYm9keT48L2h0bWw+CiAgICAnJycKICAgIG1zZy5hdHRhY2goTUlNRVRleHQob3BlbigndGVtcGxhdGVzL2xmaS5odG1sJywpLnJlYWQoKSwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dChpbnB1dHNpdGUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQodXJsc2l0ZSwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dChjbG9zZW1haWwsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQocmVzcGVjdCwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dCh5b3VybmFtZSwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dCh0YWJsZWNsb3NlLCdodG1sJykpCiAgICBwcmludCAoY3lhbi5Db2xvcisnW+KXj10gRW50ZXIgeW91ciBmaWxlIGFzIGEgUE9DIChQcm9vZiBvZiBDb25jZXB0KSEnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvRG9jdW1lbnQvcmVwb3J0YnVnLnBkZicpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy9yZXBvcnRidWcuanBnJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL1JlY29yZGVyL3JlcG9ydGJ1Zy5tcDQnKQogICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykKICAgIHByaW50IChncmVlbi5Db2xvcisn4pWt4pSB4pSBwqQnK3llbGxvdy5Db2xvcisnIFtFbnRlciB5b3VyIGRvY3VtZW50IGZpbGUgKGRlZmF1bHQ6emN5YmVyY3J1LmpwZyldJykKICAgIGZpbGVfbG9jYXRpb24gPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpIG9yICd6Y3liZXJjcnUuanBnJwogICAgZmlsZW5hbWUgPSBvcy5wYXRoLmJhc2VuYW1lKGZpbGVfbG9jYXRpb24pCiAgICBhdHRhY2htZW50ID0gb3BlbihmaWxlX2xvY2F0aW9uLCAicmIiKQogICAgcGFydCA9IE1JTUVCYXNlKCdhcHBsaWNhdGlvbicsICdvY3RldC1zdHJlYW0nKQogICAgcGFydC5zZXRfcGF5bG9hZChhdHRhY2htZW50LnJlYWQoKSkKICAgIGVuY29kZXJzLmVuY29kZV9iYXNlNjQocGFydCkKICAgIHBhcnQuYWRkX2hlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsICJhdHRhY2htZW50OyBmaWxlbmFtZT0gJXMiICUgZmlsZW5hbWUpCiAgICBtc2cuYXR0YWNoKHBhcnQpCiAgCiAgCiAgCmVsaWYgaW5wdXRidWcgPT0gJzMnOgoKICAgIGlucHV0c2l0ZSA9ICc8Yj51cmwgdnVsbiBSZW1vdGUgRmlsZSBJbmNsdXNpb24gOjwvYj4gJwogICAgcHJpbnQgKCdcbicrY3lhbi5Db2xvcisnW+KXj10gRXggOiBodHRwczovL3Bvcm5zaXRlLmNvbS92aWV3Lz9wYWdlPWh0dHA6Ly9leC5jb20vc2hlbGwudHh0JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgdGhlIGJ1ZyB3ZWJzaXRlIHVybF0nKQogICAgdXJsc2l0ZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHVybHNpdGU6CiAgICAgICAgcHJpbnQgKCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgc2l0ZSBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgY2xvc2VtYWlsID0gJzxicj48YnI+ZGVuZ2FuIGxhcG9yYW4gaW5pIHNlbW9nYSBidWcgcmVwb3J0IHNheWEgZGFwYXQgZGl0ZXJpbWEgZGVuZ2FuIGJhaWssIHRlcmltYWthc2loLicKICAgIHJlc3BlY3QgPSAnPGJyPjxicj5Ib3JtYXQgc2F5YSw8YnI+JwogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIFlvdXIgTmFtZV0nKQogICAgeW91cm5hbWUgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCiAgICBpZiB5b3VybmFtZToKICAgICAgICBwcmludCgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgbmFtZSEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKICAgIHRhYmxlY2xvc2UgPSAnJyc8L3A+PC90ZD48L3RyPjx0cj4KICAgIDx0aCBjbGFzcz0idGh0d28iPgogICAgcmVwb3J0ZWQgdXNpbmcgcmVwb3J0YnVnIHRvb2xzPGJyPnRvb2xzIG1hZGUgYnkgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9zaHViaGFtX2cwc2Fpbi8iPnNodWJoYW1fZzBzYWluPC9hPgogICAgPC90aD4KICAgIDwvdHI+PC90YWJsZT48L3RkPjwvdHI+PC90YWJsZT48L2JvZHk+PC9odG1sPgogICAgJycnCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KG9wZW4oJ3RlbXBsYXRlcy9yZmkuaHRtbCcsKS5yZWFkKCksJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoaW5wdXRzaXRlLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHVybHNpdGUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoY2xvc2VtYWlsLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHJlc3BlY3QsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoeW91cm5hbWUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQodGFibGVjbG9zZSwnaHRtbCcpKQogICAgcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIEVudGVyIHlvdXIgZmlsZSBhcyBhIFBPQyAoUHJvb2Ygb2YgQ29uY2VwdCkhJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL0RvY3VtZW50L3JlcG9ydGJ1Zy5wZGYnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvcmVwb3J0YnVnLmpwZycpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9SZWNvcmRlci9yZXBvcnRidWcubXA0JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBkb2N1bWVudCBmaWxlIChkZWZhdWx0OnpjeWJlcmNydS5qcGcpXScpCiAgICBmaWxlX2xvY2F0aW9uID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKSBvciAnemN5YmVyY3J1LmpwZycKICAgIGZpbGVuYW1lID0gb3MucGF0aC5iYXNlbmFtZShmaWxlX2xvY2F0aW9uKQogICAgYXR0YWNobWVudCA9IG9wZW4oZmlsZV9sb2NhdGlvbiwgInJiIikKICAgIHBhcnQgPSBNSU1FQmFzZSgnYXBwbGljYXRpb24nLCAnb2N0ZXQtc3RyZWFtJykKICAgIHBhcnQuc2V0X3BheWxvYWQoYXR0YWNobWVudC5yZWFkKCkpCiAgICBlbmNvZGVycy5lbmNvZGVfYmFzZTY0KHBhcnQpCiAgICBwYXJ0LmFkZF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAiYXR0YWNobWVudDsgZmlsZW5hbWU9ICVzIiAlIGZpbGVuYW1lKQogICAgbXNnLmF0dGFjaChwYXJ0KQogIAogIAogIAplbGlmIGlucHV0YnVnID09ICc0JzoKCiAgICBpbnB1dHNpdGUgPSAnPGI+dXJsIHZ1bG4gUmVtb3RlIENvZGUgRXhlY3V0aW9uIDo8L2I+ICcKICAgIHByaW50ICgnXG4nK2N5YW4uQ29sb3IrJ1vil49dIEV4IDogaHR0cHM6Ly9wb3Juc2l0ZS5jb20vY2dpX2Jpbi9tYWluLmNnaT9ib2FyZD1GUkVFX0JPQVJEJykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgdGhlIGJ1ZyB3ZWJzaXRlIHVybF0nKQogICAgdXJsc2l0ZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHVybHNpdGU6CiAgICAgICAgcHJpbnQgKCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgc2l0ZSBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgY2xvc2VtYWlsID0gJzxicj48YnI+ZGVuZ2FuIGxhcG9yYW4gaW5pIHNlbW9nYSBidWcgcmVwb3J0IHNheWEgZGFwYXQgZGl0ZXJpbWEgZGVuZ2FuIGJhaWssIHRlcmltYWthc2loLicKICAgIHJlc3BlY3QgPSAnPGJyPjxicj5Ib3JtYXQgc2F5YSw8YnI+JwogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIFlvdXIgTmFtZV0nKQogICAgeW91cm5hbWUgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCiAgICBpZiB5b3VybmFtZToKICAgICAgICBwcmludCgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgbmFtZSEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKICAgIHRhYmxlY2xvc2UgPSAnJyc8L3A+PC90ZD48L3RyPjx0cj4KICAgIDx0aCBjbGFzcz0idGh0d28iPgogICAgcmVwb3J0ZWQgdXNpbmcgcmVwb3J0YnVnIHRvb2xzPGJyPnRvb2xzIG1hZGUgYnkgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9zaHViaGFtX2cwc2Fpbi8iPnNodWJoYW1fZzBzYWluPC9hPgogICAgPC90aD4KICAgIDwvdHI+PC90YWJsZT48L3RkPjwvdHI+PC90YWJsZT48L2JvZHk+PC9odG1sPgogICAgJycnCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KG9wZW4oJ3RlbXBsYXRlcy9yY2UuaHRtbCcsKS5yZWFkKCksJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoaW5wdXRzaXRlLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHVybHNpdGUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoY2xvc2VtYWlsLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHJlc3BlY3QsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoeW91cm5hbWUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQodGFibGVjbG9zZSwnaHRtbCcpKQogICAgcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIEVudGVyIHlvdXIgZmlsZSBhcyBhIFBPQyAoUHJvb2Ygb2YgQ29uY2VwdCkhJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL0RvY3VtZW50L3JlcG9ydGJ1Zy5wZGYnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvcmVwb3J0YnVnLmpwZycpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9SZWNvcmRlci9yZXBvcnRidWcubXA0JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBkb2N1bWVudCBmaWxlIChkZWZhdWx0OnpjeWJlcmNydS5qcGcpXScpCiAgICBmaWxlX2xvY2F0aW9uID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKSBvciAnemN5YmVyY3J1LmpwZycKICAgIGZpbGVuYW1lID0gb3MucGF0aC5iYXNlbmFtZShmaWxlX2xvY2F0aW9uKQogICAgYXR0YWNobWVudCA9IG9wZW4oZmlsZV9sb2NhdGlvbiwgInJiIikKICAgIHBhcnQgPSBNSU1FQmFzZSgnYXBwbGljYXRpb24nLCAnb2N0ZXQtc3RyZWFtJykKICAgIHBhcnQuc2V0X3BheWxvYWQoYXR0YWNobWVudC5yZWFkKCkpCiAgICBlbmNvZGVycy5lbmNvZGVfYmFzZTY0KHBhcnQpCiAgICBwYXJ0LmFkZF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAiYXR0YWNobWVudDsgZmlsZW5hbWU9ICVzIiAlIGZpbGVuYW1lKQogICAgbXNnLmF0dGFjaChwYXJ0KQogIAogIAogIAplbGlmIGlucHV0YnVnID09JzUnOgoKICAgIGlucHV0c2l0ZSA9ICc8Yj51cmwgdnVsbiBDU1JGIEF0dGFjayA6PC9iPiAnCiAgICBwcmludCAoJ1xuJytjeWFuLkNvbG9yKydb4pePXSBFeCA6IGh0dHBzOi8vcG9ybnNpdGUuY29tL2Rvd25sb2FkLz9hY2M9cGF1bCZwcmljZT0xMDAwJykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgdGhlIGJ1ZyB3ZWJzaXRlIHVybF0nKQogICAgdXJsc2l0ZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHVybHNpdGU6CiAgICAgICAgcHJpbnQgKCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgc2l0ZSBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgY2xvc2VtYWlsID0gJzxicj48YnI+ZGVuZ2FuIGxhcG9yYW4gaW5pIHNlbW9nYSAgcmVwb3J0YnVnIHNheWEgZGFwYXQgZGl0ZXJpbWEgZGVuZ2FuIGJhaWssIHRlcmltYWthc2loLicKICAgIHJlc3BlY3QgPSAnPGJyPjxicj5Ib3JtYXQgc2F5YSw8YnI+JwogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIFlvdXIgTmFtZV0nKQogICAgeW91cm5hbWUgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCiAgICBpZiB5b3VybmFtZToKICAgICAgICBwcmludCgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgbmFtZSEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKICAgIHRhYmxlY2xvc2UgPSAnJyc8L3A+PC90ZD48L3RyPjx0cj4KICAgIDx0aCBjbGFzcz0idGh0d28iPgogICAgcmVwb3J0ZWQgdXNpbmcgcmVwb3J0YnVnIHRvb2xzPGJyPnRvb2xzIG1hZGUgYnkgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9zaHViaGFtX2cwc2Fpbi8iPnNodWJoYW1fZzBzYWluPC9hPgogICAgPC90aD4KICAgIDwvdHI+PC90YWJsZT48L3RkPjwvdHI+PC90YWJsZT48L2JvZHk+PC9odG1sPgogICAgJycnCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KG9wZW4oJ3RlbXBsYXRlcy9jc3JmLmh0bWwnLCkucmVhZCgpLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KGlucHV0c2l0ZSwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dCh1cmxzaXRlLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KGNsb3NlbWFpbCwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dChyZXNwZWN0LCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHlvdXJuYW1lLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHRhYmxlY2xvc2UsJ2h0bWwnKSkKICAgIHByaW50IChjeWFuLkNvbG9yKydb4pePXSBFbnRlciB5b3VyIGZpbGUgYXMgYSBQT0MgKFByb29mIG9mIENvbmNlcHQpIScpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9Eb2N1bWVudC9yZXBvcnRidWcucGRmJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL1BpY3R1cmVzL3JlcG9ydGJ1Zy5qcGcnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvUmVjb3JkZXIvcmVwb3J0YnVnLm1wNCcpCiAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIHlvdXIgZG9jdW1lbnQgZmlsZSAoZGVmYXVsdDp6Y3liZXJjcnUuanBnKV0nKQogICAgZmlsZV9sb2NhdGlvbiA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykgb3IgJ3pjeWJlcmNydS5qcGcnCiAgICBmaWxlbmFtZSA9IG9zLnBhdGguYmFzZW5hbWUoZmlsZV9sb2NhdGlvbikKICAgIGF0dGFjaG1lbnQgPSBvcGVuKGZpbGVfbG9jYXRpb24sICJyYiIpCiAgICBwYXJ0ID0gTUlNRUJhc2UoJ2FwcGxpY2F0aW9uJywgJ29jdGV0LXN0cmVhbScpCiAgICBwYXJ0LnNldF9wYXlsb2FkKGF0dGFjaG1lbnQucmVhZCgpKQogICAgZW5jb2RlcnMuZW5jb2RlX2Jhc2U2NChwYXJ0KQogICAgcGFydC5hZGRfaGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgImF0dGFjaG1lbnQ7IGZpbGVuYW1lPSAlcyIgJSBmaWxlbmFtZSkKICAgIG1zZy5hdHRhY2gocGFydCkKICAKICAKICAKZWxpZiBpbnB1dGJ1ZyA9PSAnNic6CgogICAgaW5wdXRzaXRlID0gJzxiPnVybCB2dWxuIFhTUyBhdHRhY2sgOjwvYj4gJwogICAgcHJpbnQgKCdcbicrY3lhbi5Db2xvcisnW+KXj10gRXggOiBodHRwczovL3Bvcm5zaXRlLmNvbS9zZWFyY2gvP3E9JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgdGhlIGJ1ZyB3ZWJzaXRlIHVybF0nKQogICAgdXJsc2l0ZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHVybHNpdGU6CiAgICAgICAgcHJpbnQgKCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgc2l0ZSBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgY2xvc2VtYWlsID0gJzxicj48YnI+ZGVuZ2FuIGxhcG9yYW4gaW5pIHNlbW9nYSBidWcgcmVwb3J0IHNheWEgZGFwYXQgZGl0ZXJpbWEgZGVuZ2FuIGJhaWssIHRlcmltYWthc2loLicKICAgIHJlc3BlY3QgPSAnPGJyPjxicj5Ib3JtYXQgc2F5YSw8YnI+JwogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIFlvdXIgTmFtZV0nKQogICAgeW91cm5hbWUgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCiAgICBpZiB5b3VybmFtZToKICAgICAgICBwcmludCgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgbmFtZSEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKICAgIHRhYmxlY2xvc2UgPSAnJyc8L3A+PC90ZD48L3RyPjx0cj4KICAgIDx0aCBjbGFzcz0idGh0d28iPgogICAgcmVwb3J0ZWQgdXNpbmcgcmVwb3J0YnVnIHRvb2xzPGJyPnRvb2xzIG1hZGUgYnkgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9zaHViaGFtX2cwc2Fpbi8iPnNodWJoYW1fZzBzYWluPC9hPgogICAgPC90aD4KICAgIDwvdHI+PC90YWJsZT48L3RkPjwvdHI+PC90YWJsZT48L2JvZHk+PC9odG1sPgogICAgJycnCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KG9wZW4oJ3RlbXBsYXRlcy94c3MuaHRtbCcsKS5yZWFkKCksJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoaW5wdXRzaXRlLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHVybHNpdGUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoY2xvc2VtYWlsLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHJlc3BlY3QsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoeW91cm5hbWUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQodGFibGVjbG9zZSwnaHRtbCcpKQogICAgcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIEVudGVyIHlvdXIgZmlsZSBhcyBhIFBPQyAoUHJvb2Ygb2YgQ29uY2VwdCkhJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL0RvY3VtZW50L3JlcG9ydGJ1Zy5wZGYnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvcmVwb3J0YnVnLmpwZycpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9SZWNvcmRlci9yZXBvcnRidWcubXA0JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBkb2N1bWVudCBmaWxlIChkZWZhdWx0OnpjeWJlcmNydS5qcGcpXScpCiAgICBmaWxlX2xvY2F0aW9uID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKSBvciAnemN5YmVyY3J1LmpwZycKICAgIGZpbGVuYW1lID0gb3MucGF0aC5iYXNlbmFtZShmaWxlX2xvY2F0aW9uKQogICAgYXR0YWNobWVudCA9IG9wZW4oZmlsZV9sb2NhdGlvbiwgInJiIikKICAgIHBhcnQgPSBNSU1FQmFzZSgnYXBwbGljYXRpb24nLCAnb2N0ZXQtc3RyZWFtJykKICAgIHBhcnQuc2V0X3BheWxvYWQoYXR0YWNobWVudC5yZWFkKCkpCiAgICBlbmNvZGVycy5lbmNvZGVfYmFzZTY0KHBhcnQpCiAgICBwYXJ0LmFkZF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAiYXR0YWNobWVudDsgZmlsZW5hbWU9ICVzIiAlIGZpbGVuYW1lKQogICAgbXNnLmF0dGFjaChwYXJ0KQogIAogIAogIAplbGlmIGlucHV0YnVnID09ICc3JzoKCiAgICBpbnB1dHNpdGUgPSAnPGI+dXJsIHZ1bG4gU2VydmVyIFNpZGUgSW5qZWN0aW9uIDo8L2I+ICcKICAgIHByaW50ICgnXG4nK2N5YW4uQ29sb3IrJ1vil49dIEV4IDogaHR0cHM6Ly9wb3Juc2l0ZS5jb20vbWVtYmVyL2xvZ2luLnNodG1sP3BhZ2U9JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgdGhlIGJ1ZyB3ZWJzaXRlIHVybF0nKQogICAgdXJsc2l0ZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHVybHNpdGU6CiAgICAgICAgcHJpbnQgKCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgc2l0ZSBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgY2xvc2VtYWlsID0gJzxicj48YnI+ZGVuZ2FuIGxhcG9yYW4gaW5pIHNlbW9nYSBidWcgcmVwb3J0IHNheWEgZGFwYXQgZGl0ZXJpbWEgZGVuZ2FuIGJhaWssIHRlcmltYWthc2loLicKICAgIHJlc3BlY3QgPSAnPGJyPjxicj5Ib3JtYXQgc2F5YSw8YnI+JwogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIFlvdXIgTmFtZV0nKQogICAgeW91cm5hbWUgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCiAgICBpZiB5b3VybmFtZToKICAgICAgICBwcmludCgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgbmFtZSEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKICAgIHRhYmxlY2xvc2UgPSAnJyc8L3A+PC90ZD48L3RyPjx0cj4KICAgIDx0aCBjbGFzcz0idGh0d28iPgogICAgcmVwb3J0ZWQgdXNpbmcgcmVwb3J0YnVnIHRvb2xzPGJyPnRvb2xzIG1hZGUgYnkgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9zaHViaGFtX2cwc2Fpbi8iPnNodWJoYW1fZzBzYWluPC9hPgogICAgPC90aD4KICAgIDwvdHI+PC90YWJsZT48L3RkPjwvdHI+PC90YWJsZT48L2JvZHk+PC9odG1sPgogICAgJycnCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KG9wZW4oJ3RlbXBsYXRlcy9zc2kuaHRtbCcsKS5yZWFkKCksJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoaW5wdXRzaXRlLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHVybHNpdGUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoY2xvc2VtYWlsLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHJlc3BlY3QsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoeW91cm5hbWUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQodGFibGVjbG9zZSwnaHRtbCcpKQogICAgcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIEVudGVyIHlvdXIgZmlsZSBhcyBhIFBPQyAoUHJvb2Ygb2YgQ29uY2VwdCkhJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL0RvY3VtZW50L3JlcG9ydGJ1Zy5wZGYnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvcmVwb3J0YnVnLmpwZycpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9SZWNvcmRlci9yZXBvcnRidWcubXA0JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBkb2N1bWVudCBmaWxlIChkZWZhdWx0OnpjeWJlcmNydS5qcGcpXScpCiAgICBmaWxlX2xvY2F0aW9uID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKSBvciAnemN5YmVyY3J1LmpwZycKICAgIGZpbGVuYW1lID0gb3MucGF0aC5iYXNlbmFtZShmaWxlX2xvY2F0aW9uKQogICAgYXR0YWNobWVudCA9IG9wZW4oZmlsZV9sb2NhdGlvbiwgInJiIikKICAgIHBhcnQgPSBNSU1FQmFzZSgnYXBwbGljYXRpb24nLCAnb2N0ZXQtc3RyZWFtJykKICAgIHBhcnQuc2V0X3BheWxvYWQoYXR0YWNobWVudC5yZWFkKCkpCiAgICBlbmNvZGVycy5lbmNvZGVfYmFzZTY0KHBhcnQpCiAgICBwYXJ0LmFkZF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAiYXR0YWNobWVudDsgZmlsZW5hbWU9ICVzIiAlIGZpbGVuYW1lKQogICAgbXNnLmF0dGFjaChwYXJ0KQogIAogIAogIAplbGlmIGlucHV0YnVnID09ICc4JzoKCiAgICBpbnB1dHNpdGUgPSAnPGI+dXJsIHZ1bG4gQ1NWIEluamVjdGlvbiA6PC9iPiAnCiAgICBwcmludCAoJ1xuJytjeWFuLkNvbG9yKydb4pePXSBFeCA6IGh0dHBzOi8vcG9ybnNpdGUuY29tL21lbWJlci91cGxvYWRfdmlkZW8vI2FkZHZpZGVvJykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgdGhlIGJ1ZyB3ZWJzaXRlIHVybF0nKQogICAgdXJsc2l0ZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHVybHNpdGU6CiAgICAgICAgcHJpbnQgKCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgc2l0ZSBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgY2xvc2VtYWlsID0gJzxicj48YnI+ZGVuZ2FuIGxhcG9yYW4gaW5pIHNlbW9nYSBidWcgcmVwb3J0IHNheWEgZGFwYXQgZGl0ZXJpbWEgZGVuZ2FuIGJhaWssIHRlcmltYWthc2loLicKICAgIHJlc3BlY3QgPSAnPGJyPjxicj5Ib3JtYXQgc2F5YSw8YnI+JwogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIFlvdXIgTmFtZV0nKQogICAgeW91cm5hbWUgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCiAgICBpZiB5b3VybmFtZToKICAgICAgICBwcmludCgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgbmFtZSEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKICAgIHRhYmxlY2xvc2UgPSAnJyc8L3A+PC90ZD48L3RyPjx0cj4KICAgIDx0aCBjbGFzcz0idGh0d28iPgogICAgcmVwb3J0ZWQgdXNpbmcgcmVwb3J0YnVnIHRvb2xzPGJyPnRvb2xzIG1hZGUgYnkgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9zaHViaGFtX2cwc2Fpbi8iPnNodWJoYW1fZzBzYWluPC9hPgogICAgPC90aD4KICAgIDwvdHI+PC90YWJsZT48L3RkPjwvdHI+PC90YWJsZT48L2JvZHk+PC9odG1sPgogICAgJycnCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KG9wZW4oJ3RlbXBsYXRlcy9jc3YuaHRtbCcsKS5yZWFkKCksJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoaW5wdXRzaXRlLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHVybHNpdGUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoY2xvc2VtYWlsLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHJlc3BlY3QsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoeW91cm5hbWUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQodGFibGVjbG9zZSwnaHRtbCcpKQogICAgcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIEVudGVyIHlvdXIgZmlsZSBhcyBhIFBPQyAoUHJvb2Ygb2YgQ29uY2VwdCkhJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL0RvY3VtZW50L3JlcG9ydGJ1Zy5wZGYnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvcmVwb3J0YnVnLmpwZycpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9SZWNvcmRlci9yZXBvcnRidWcubXA0JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBkb2N1bWVudCBmaWxlIChkZWZhdWx0OnpjeWJlcmNydS5qcGcpXScpCiAgICBmaWxlX2xvY2F0aW9uID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKSBvciAnemN5YmVyY3J1LmpwZycKICAgIGZpbGVuYW1lID0gb3MucGF0aC5iYXNlbmFtZShmaWxlX2xvY2F0aW9uKQogICAgYXR0YWNobWVudCA9IG9wZW4oZmlsZV9sb2NhdGlvbiwgInJiIikKICAgIHBhcnQgPSBNSU1FQmFzZSgnYXBwbGljYXRpb24nLCAnb2N0ZXQtc3RyZWFtJykKICAgIHBhcnQuc2V0X3BheWxvYWQoYXR0YWNobWVudC5yZWFkKCkpCiAgICBlbmNvZGVycy5lbmNvZGVfYmFzZTY0KHBhcnQpCiAgICBwYXJ0LmFkZF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAiYXR0YWNobWVudDsgZmlsZW5hbWU9ICVzIiAlIGZpbGVuYW1lKQogICAgbXNnLmF0dGFjaChwYXJ0KQogIAogIAogIAplbGlmIGlucHV0YnVnID09ICc5JzoKCiAgICBpbnB1dHNpdGUgPSAnPGI+dXJsIHZ1bG4gUGFyYW1ldGVyIFRlbXBlcmluZyA6PC9iPiAnCiAgICBwcmludCAoJ1xuJytjeWFuLkNvbG9yKydb4pePXSBFeCA6IGh0dHBzOi8vcG9ybnNpdGUuY29tL2Rvd25sb2FkLz92aWQ9YXNpYW4ubXA0JnByaWNlPTEwMDAnKQogICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykKICAgIHByaW50IChncmVlbi5Db2xvcisn4pWt4pSB4pSBwqQnK3llbGxvdy5Db2xvcisnIFtFbnRlciB0aGUgYnVnIHdlYnNpdGUgdXJsXScpCiAgICB1cmxzaXRlID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKQogICAgaWYgdXJsc2l0ZToKICAgICAgICBwcmludCAoJycpCiAgICBlbHNlOgogICAgICAgIHByaW50ICgnXG4nK3JlZC5Db2xvcisnWyFdIFBsZWFzZSBlbnRlciBzaXRlIG5hbWUhJykKICAgICAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZBcbicpCiAgICAgICAgZXhpdCgpCiAgICBjbG9zZW1haWwgPSAnPGJyPjxicj5kZW5nYW4gbGFwb3JhbiBpbmkgc2Vtb2dhIGJ1ZyByZXBvcnQgc2F5YSBkYXBhdCBkaXRlcmltYSBkZW5nYW4gYmFpaywgdGVyaW1ha2FzaWguJwogICAgcmVzcGVjdCA9ICc8YnI+PGJyPkhvcm1hdCBzYXlhLDxicj4nCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgWW91ciBOYW1lXScpCiAgICB5b3VybmFtZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHlvdXJuYW1lOgogICAgICAgIHByaW50KCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgeW91ciBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgdGFibGVjbG9zZSA9ICcnJzwvcD48L3RkPjwvdHI+PHRyPgogICAgPHRoIGNsYXNzPSJ0aHR3byI+CiAgICByZXBvcnRlZCB1c2luZyByZXBvcnRidWcgdG9vbHM8YnI+dG9vbHMgbWFkZSBieSA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3NodWJoYW1fZzBzYWluLyI+c2h1YmhhbV9nMHNhaW48L2E+CiAgICA8L3RoPgogICAgPC90cj48L3RhYmxlPjwvdGQ+PC90cj48L3RhYmxlPjwvYm9keT48L2h0bWw+CiAgICAnJycKICAgIG1zZy5hdHRhY2goTUlNRVRleHQob3BlbigndGVtcGxhdGVzL3BhcmFtdGVtcGVyLmh0bWwnLCkucmVhZCgpLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KGlucHV0c2l0ZSwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dCh1cmxzaXRlLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KGNsb3NlbWFpbCwnaHRtbCcpKQogICAgbXNnLmF0dGFjaChNSU1FVGV4dChyZXNwZWN0LCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHlvdXJuYW1lLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHRhYmxlY2xvc2UsJ2h0bWwnKSkKICAgIHByaW50IChjeWFuLkNvbG9yKydb4pePXSBFbnRlciB5b3VyIGZpbGUgYXMgYSBQT0MgKFByb29mIG9mIENvbmNlcHQpIScpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9Eb2N1bWVudC9yZXBvcnRidWcucGRmJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL1BpY3R1cmVzL3JlcG9ydGJ1Zy5qcGcnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvUmVjb3JkZXIvcmVwb3J0YnVnLm1wNCcpCiAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIHlvdXIgZG9jdW1lbnQgZmlsZSAoZGVmYXVsdDp6Y3liZXJjcnUuanBnKV0nKQogICAgZmlsZV9sb2NhdGlvbiA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykgb3IgJ3pjeWJlcmNydS5qcGcnCiAgICBmaWxlbmFtZSA9IG9zLnBhdGguYmFzZW5hbWUoZmlsZV9sb2NhdGlvbikKICAgIGF0dGFjaG1lbnQgPSBvcGVuKGZpbGVfbG9jYXRpb24sICJyYiIpCiAgICBwYXJ0ID0gTUlNRUJhc2UoJ2FwcGxpY2F0aW9uJywgJ29jdGV0LXN0cmVhbScpCiAgICBwYXJ0LnNldF9wYXlsb2FkKGF0dGFjaG1lbnQucmVhZCgpKQogICAgZW5jb2RlcnMuZW5jb2RlX2Jhc2U2NChwYXJ0KQogICAgcGFydC5hZGRfaGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgImF0dGFjaG1lbnQ7IGZpbGVuYW1lPSAlcyIgJSBmaWxlbmFtZSkKICAgIG1zZy5hdHRhY2gocGFydCkKICAKICAKICAKZWxpZiBpbnB1dGJ1ZyA9PSAnMTAnOgoKICAgIGlucHV0c2l0ZSA9ICc8Yj51cmwgdnVsbiBCeXBhc3MgQWRtaW4gOjwvYj4gJwogICAgcHJpbnQgKCdcbicrY3lhbi5Db2xvcisnW+KXj10gRXggOiBodHRwczovL3Bvcm5zaXRlLmNvbS9hZG1pbnBvcm4vbG9naW4ucGhwJykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgdGhlIGJ1ZyB3ZWJzaXRlIHVybF0nKQogICAgdXJsc2l0ZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHVybHNpdGU6CiAgICAgICAgcHJpbnQgKCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgc2l0ZSBuYW1lIScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgICAgIGV4aXQoKQogICAgY2xvc2VtYWlsID0gJzxicj48YnI+ZGVuZ2FuIGxhcG9yYW4gaW5pIHNlbW9nYSBidWcgcmVwb3J0IHNheWEgZGFwYXQgZGl0ZXJpbWEgZGVuZ2FuIGJhaWssIHRlcmltYWthc2loLicKICAgIHJlc3BlY3QgPSAnPGJyPjxicj5Ib3JtYXQgc2F5YSw8YnI+JwogICAgcHJpbnQgKGdyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIFlvdXIgTmFtZV0nKQogICAgeW91cm5hbWUgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCiAgICBpZiB5b3VybmFtZToKICAgICAgICBwcmludCgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgbmFtZSEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKICAgIHRhYmxlY2xvc2UgPSAnJyc8L3A+PC90ZD48L3RyPjx0cj4KICAgIDx0aCBjbGFzcz0idGh0d28iPgogICAgcmVwb3J0ZWQgdXNpbmcgcmVwb3J0YnVnIHRvb2xzPGJyPnRvb2xzIG1hZGUgYnkgPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9zaHViaGFtX2cwc2Fpbi8iPnNodWJoYW1fZzBzYWluPC9hPgogICAgPC90aD4KICAgIDwvdHI+PC90YWJsZT48L3RkPjwvdHI+PC90YWJsZT48L2JvZHk+PC9odG1sPgogICAgJycnCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KG9wZW4oJ3RlbXBsYXRlcy9yZmkuaHRtbCcsKS5yZWFkKCksJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoaW5wdXRzaXRlLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHVybHNpdGUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoY2xvc2VtYWlsLCdodG1sJykpCiAgICBtc2cuYXR0YWNoKE1JTUVUZXh0KHJlc3BlY3QsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoeW91cm5hbWUsJ2h0bWwnKSkKICAgIG1zZy5hdHRhY2goTUlNRVRleHQodGFibGVjbG9zZSwnaHRtbCcpKQogICAgcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIEVudGVyIHlvdXIgZmlsZSBhcyBhIFBPQyAoUHJvb2Ygb2YgQ29uY2VwdCkhJykKICAgIHByaW50ICgnW+KXj10gRXggOiAvc3RvcmFnZS9lbXVsYXRlZC8wL0RvY3VtZW50L3JlcG9ydGJ1Zy5wZGYnKQogICAgcHJpbnQgKCdb4pePXSBFeCA6IC9zdG9yYWdlL2VtdWxhdGVkLzAvUGljdHVyZXMvcmVwb3J0YnVnLmpwZycpCiAgICBwcmludCAoJ1vil49dIEV4IDogL3N0b3JhZ2UvZW11bGF0ZWQvMC9SZWNvcmRlci9yZXBvcnRidWcubXA0JykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBkb2N1bWVudCBmaWxlIChkZWZhdWx0OnpjeWJlcmNydS5qcGcpXScpCiAgICBmaWxlX2xvY2F0aW9uID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKSBvciAnemN5YmVyY3J1LmpwZycKICAgIGZpbGVuYW1lID0gb3MucGF0aC5iYXNlbmFtZShmaWxlX2xvY2F0aW9uKQogICAgYXR0YWNobWVudCA9IG9wZW4oZmlsZV9sb2NhdGlvbiwgInJiIikKICAgIHBhcnQgPSBNSU1FQmFzZSgnYXBwbGljYXRpb24nLCAnb2N0ZXQtc3RyZWFtJykKICAgIHBhcnQuc2V0X3BheWxvYWQoYXR0YWNobWVudC5yZWFkKCkpCiAgICBlbmNvZGVycy5lbmNvZGVfYmFzZTY0KHBhcnQpCiAgICBwYXJ0LmFkZF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAiYXR0YWNobWVudDsgZmlsZW5hbWU9ICVzIiAlIGZpbGVuYW1lKQogICAgbXNnLmF0dGFjaChwYXJ0KQogIAogIAogIAplbGlmIGlucHV0YnVnID09ICc5OSc6CiAgICBwcmludCAoJ1xuJytjeWFuLkNvbG9yKydb4pePXSBoYXZlIGEgbmljZSBkYXkhJykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBleGl0KCkKICAgIAplbGlmIGlucHV0YnVnID09ICcwMCc6CiAgICBzeXMgPSBzeXN0ZW0oJ2NkIC4uICYmIHJtIC1yZiBidWdyZXBvcnQgJiYgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9zaHViaGFtZ2dvc2FpL3JlcG9ydGJ1Zy5naXQnKQogICAgcHJpbnQgKCdcbicrY3lhbi5Db2xvcisnW+KXj10gU3VjY2VzcyBSZWluc3RhbGwvVXBkYXRlIFRvb2xzIScpCiAgICBwcmludCAoJ1vil49dIENUUkwgKyBEIGZvciBleGl0LCBhbmQgbG9naW4gYWdhaW4hJykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkCcpCiAgICBleGl0KCkKZWxzZToKICAgIHByaW50ICgnXG4nK3JlZC5Db2xvcisnWyFdIHdyb25nIGlucHV0IScpCiAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQogICAgZXhpdCgpCiAgICAKICAgIApzeXN0ZW0oJ2NsZWFyJykKaWNvbi5pdGVtKCkKcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIFNlbGVjdCB0aGUgZW1haWwgYWNjb3VudCBzZXJ2ZXIgdXNlZCEnKQpwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQpwcmludCAoJyAgICAnK2dyZWVuLkNvbG9yKydbMV0uJyt5ZWxsb3cuQ29sb3IrJyBHbWFpbCcpCnByaW50ICgnICAgICcrZ3JlZW4uQ29sb3IrJ1syXS4nK3llbGxvdy5Db2xvcisnIFlhaG9vJykKcHJpbnQgKCcgICAnK2dyZWVuLkNvbG9yKydbOTldLicreWVsbG93LkNvbG9yKycgRXhpdC9RdWl0JykKcHJpbnQgKCdcbicrZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgdGhlIHNlbGVjdGVkIG51bWJlcl0nKQpjaG9pY2UgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCmlmIGNob2ljZSA9PSAnMSc6CiAgICAgICAgc2VydmVyID0gc210cGxpYi5TTVRQKCdzbXRwLmdtYWlsLmNvbScsIDU4NykKZWxpZiBjaG9pY2UgPT0gJzInOgogICAgICAgIHNlcnZlciA9IHNtdHBsaWIuU01UUCgnc210cC5tYWlsLnlhaG9vLmNvbScsIDU4NykKZWxpZiBjaG9pY2UgPT0gJzk5JzoKICAgICAgICBwcmludCAoJ1xuJytjeWFuLkNvbG9yKydb4pePXSBoYXZlIGEgbmljZSBkYXkhJykKICAgICAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQogICAgICAgIGV4aXQoKQplbHNlOgogICAgICAgIHByaW50ICgnXG4nK3JlZC5Db2xvcisnWyFdIHdyb25nIGlucHV0IScpCiAgICAgICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykKICAgICAgICBleGl0KCkKCnByaW50ICgnXG4nK2dyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIHlvdXIgZW1haWxdJykKZW1haWwgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCmlmIGVtYWlsOgogICAgcHJpbnQgKCcnKQplbHNlOgogICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgZW1haWwhJykKICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgIGV4aXQoKQoKcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIEJsYW5rIHBhc3N3ZCBPUiBTZWUgcGFzc3dkIGZvciBlbnRlcmluZyB5b3VyIHBhc3M/JykKcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykKcHJpbnQgKCcgICAgJytncmVlbi5Db2xvcisnWzFdLicreWVsbG93LkNvbG9yKycgU2VlIFBhc3N3b3JkJykKcHJpbnQgKCcgICAgJytncmVlbi5Db2xvcisnWzJdLicreWVsbG93LkNvbG9yKycgQmxhbmsgUGFzc3dvcmQnKQpwcmludCAoJ1xuJytncmVlbi5Db2xvcisn4pWt4pSB4pSBwqQnK3llbGxvdy5Db2xvcisnIFtFbnRlciB0aGUgc2VsZWN0ZWQgbnVtYmVyXScpCmlucHV0cGFzcyA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKaWYgaW5wdXRwYXNzID09ICcxJzoKICAgIHByaW50ICgnXG4nK2dyZWVuLkNvbG9yKyfila3ilIHilIHCpCcreWVsbG93LkNvbG9yKycgW0VudGVyIHlvdXIgcGFzc3dvcmQgZW1haWxdJykKICAgIHBhc3N3b3JkID0gaW5wdXQoZ3JlZW4uQ29sb3IrJ+KVsOKUgeKUgcKkIOKImiAgOiAnKQogICAgaWYgcGFzc3dvcmQ6CiAgICAgICAgcHJpbnQgKCcnKQogICAgZWxzZToKICAgICAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgeW91ciBwYXNzd29yZCEnKQogICAgICAgIHByaW50ICh5ZWxsb3cuQ29sb3IrJ+KVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkFxuJykKICAgICAgICBleGl0KCkKZWxpZiBpbnB1dHBhc3MgPT0gJzInOgogICAgcHJpbnQgKCdcbicrZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBwYXNzd29yZCBlbWFpbF0nKQogICAgcGFzc3dvcmQgPSBnZXRwYXNzKGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKICAgIGlmIHBhc3N3b3JkOgogICAgICAgIHByaW50ICgnJykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKCdcbicrcmVkLkNvbG9yKydbIV0gUGxlYXNlIGVudGVyIHlvdXIgcGFzc3dvcmQhJykKICAgICAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZBcbicpCiAgICAgICAgZXhpdCgpCmVsc2U6CiAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSB3cm9uZyBpbnB1dCEnKQogICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQJykKICAgIGV4aXQoKQpwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBlbWFpbCBkZXN0aW5hdGlvbl0nKQp0b2FkZHIgPSBpbnB1dChncmVlbi5Db2xvcisn4pWw4pSB4pSBwqQg4oiaICA6ICcpCmlmIHRvYWRkcjoKICAgIHByaW50ICgnJykKZWxzZToKICAgIHByaW50ICgnXG4nK3JlZC5Db2xvcisnWyFdIFBsZWFzZSBlbnRlciB5b3VyIGVtYWlsIGRlc3RpbmF0aW9uIScpCiAgICBwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZBcbicpCiAgICBleGl0KCkKcHJpbnQgKGN5YW4uQ29sb3IrJ1vil49dIEVudGVyIHlvdXIgZW1haWwgdGl0bGUhJykKcHJpbnQgKCdb4pePXSBFeCA6IFtCVUcgQk9VTlRZIFRPS09QRURJQV0gU3RvcmVkIFhTUyB0byBnZXQgdXNlciBpbmZvJykKcHJpbnQgKCdb4pePXSBFeCA6IFt4eC54eC5nby5pZF0gU1FMIElOSkVDVElPTiBvbiAvYmVyaXRhLnBocD9pZD0xMicpCnByaW50ICgnW+KXj10gRXggOiBbcG9ybnNpdGUuY29tXSBTUUwgSU5KRUNUSU9OIG9uIC9pbmRleC5waHA/aWQ9MTInKQpwcmludCAoeWVsbG93LkNvbG9yKyfilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZAnKQpwcmludCAoZ3JlZW4uQ29sb3IrJ+KVreKUgeKUgcKkJyt5ZWxsb3cuQ29sb3IrJyBbRW50ZXIgeW91ciBlbWFpbCB0aXRsZV0nKQp0aXRsZSA9IGlucHV0KGdyZWVuLkNvbG9yKyfilbDilIHilIHCpCDiiJogIDogJykKaWYgdGl0bGU6CiAgICBwcmludCAoJycpCmVsc2U6CiAgICBwcmludCAoJ1xuJytyZWQuQ29sb3IrJ1shXSBQbGVhc2UgZW50ZXIgeW91ciBlbWFpbCB0aXRsZSEnKQogICAgcHJpbnQgKHllbGxvdy5Db2xvcisn4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQXG4nKQogICAgZXhpdCgpCm1zZ1snRnJvbSddID0gZW1haWwKbXNnWydUbyddID0gdG9hZGRyCm1zZ1snU3ViamVjdCddID0gdGl0bGUKc2VydmVyLnN0YXJ0dGxzKCkKdGV4dCA9IG1zZy5hc19zdHJpbmcoKQpzZXJ2ZXIubG9naW4oZW1haWwscGFzc3dvcmQpCnNlcnZlci5zZW5kbWFpbChlbWFpbCwgdG9hZGRyLCB0ZXh0KQpwcmludCAoJ1xuJytjeWFuLkNvbG9yKydb4pePXSBTdWNjZXNzZnVsbHkgc2VudCEgY2hlY2sgdGhlIHNlbnQgbWVzc2FnZSBpbiB5b3VyIGVtYWlsIScpCnNlcnZlci5xdWl0KCkK"))
